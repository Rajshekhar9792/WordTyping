{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT\\\\texttutils\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Alert from './Components/Alert';\nimport TextForm from './Components/TextForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [state, setState] = useState(initialState)\n  const [mode, setMode] = useState('mode'); //weather darkmode is Enabled or not\n  const [text, setText] = useState('text');\n  // const [title, setTitle] = useState('title') \n  let toggleMode = () => {\n    if (mode === \"light\") {\n      setMode('dark');\n      setText('light');\n      document.body.style.backgroundColor = 'white';\n    } else {\n      setMode('light');\n      setText('dark');\n      document.body.style.backgroundColor = 'grey';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Textutils\",\n      mode: mode,\n      toggleMode: toggleMode,\n      text: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: \"This is alert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: [/*#__PURE__*/_jsxDEV(TextForm, {\n        heading: \"Enter the Text to analyze below\",\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"iNXdSl5D9c/lFcZqn8OT0GARgBg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","About","Navbar","Alert","TextForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","text","setText","toggleMode","document","body","style","backgroundColor","children","title","fileName","_jsxFileName","lineNumber","columnNumber","alert","className","heading","_c","$RefreshReg$"],"sources":["D:/REACT/texttutils/src/App.js"],"sourcesContent":["\nimport { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Alert from './Components/Alert';\nimport TextForm from './Components/TextForm';\n\nfunction App() {\n  // const [state, setState] = useState(initialState)\n  const [mode, setMode] = useState('mode') //weather darkmode is Enabled or not\n  const [text, setText] = useState('text') \n  // const [title, setTitle] = useState('title') \n  let toggleMode= () =>{\n    if(mode === \"light\"){\n      setMode('dark')\n      setText('light')\n      document.body.style.backgroundColor = 'white';\n    }\n    else{\n      setMode('light')\n      setText('dark')\n      document.body.style.backgroundColor = 'grey';\n     \n    }\n\n  }\n  \n  return (\n  <>\n<Navbar title = \"Textutils\" mode = {mode} toggleMode = {toggleMode} text = {text}/>\n<Alert alert = \"This is alert\"/>\n{ /* <Navbar/> */ }\n<div className=\"container my-3\">\n<TextForm heading = \"Enter the Text to analyze below\" mode = {mode}/>\n<About/>\n</div>\n</>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAO,sCAAsC;AAC7C,OAAO,oCAAoC;AAC3C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC,EAAC;EACzC,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,MAAM,CAAC;EACxC;EACA,IAAIe,UAAU,GAAEA,CAAA,KAAK;IACnB,IAAGJ,IAAI,KAAK,OAAO,EAAC;MAClBC,OAAO,CAAC,MAAM,CAAC;MACfE,OAAO,CAAC,OAAO,CAAC;MAChBE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,OAAO;IAC/C,CAAC,MACG;MACFP,OAAO,CAAC,OAAO,CAAC;MAChBE,OAAO,CAAC,MAAM,CAAC;MACfE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,MAAM;IAE9C;EAEF,CAAC;EAED,oBACAb,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBACFd,OAAA,CAACJ,MAAM;MAACmB,KAAK,EAAG,WAAW;MAACV,IAAI,EAAIA,IAAK;MAACI,UAAU,EAAIA,UAAW;MAACF,IAAI,EAAIA;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnFnB,OAAA,CAACH,KAAK;MAACuB,KAAK,EAAG;IAAe;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAEhCnB,OAAA;MAAKqB,SAAS,EAAC,gBAAgB;MAAAP,QAAA,gBAC/Bd,OAAA,CAACF,QAAQ;QAACwB,OAAO,EAAG,iCAAiC;QAACjB,IAAI,EAAIA;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACrEnB,OAAA,CAACL,KAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACJ,CAAC;AAEH;AAACf,EAAA,CA/BQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}